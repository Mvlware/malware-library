package com.malware.library.controllers;

import com.malware.library.exceptions.AuthorNotFoundException;
import com.malware.library.model.Author;
import com.malware.library.repository.AuthorRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.time.LocalDate;
import java.util.List;

@RestController
@RequestMapping({"/authors"})
public class AuthorController {
//    public static DateFormat simpleDateFormat = new SimpleDateFormat("dd.MM.yyyy", Locale.ENGLISH);
//    Calendar calendar = new GregorianCalendar();
//    DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseCaseInsensitive().appendPattern("dd.MM.yyyy").toFormatter();
//    formatter = formatter.withLocale(Locale.ENGLISH); //convert String to LocalDate
//    calendar.setTime(simpleDateFormat.parse(dateBirth));
//    author.setDate_of_birth(calendar.get(Calendar.DATE));

    @Autowired
    private AuthorRepository authorRepository;

    @GetMapping
    public List<Author> findAll() {
        return authorRepository.findAll();
    }

    @GetMapping(path = {"/{id}"})
    public Author findOne(@PathVariable Long id) throws Exception {
        authorRepository.findById(id).orElseThrow(() -> new AuthorNotFoundException(id));
        Author author = authorRepository.getOne(id);
        return author;
    }

    @PutMapping
    public Author save(@RequestParam(value = Author.NAME_COLUMN_NAME) String name,
                       @RequestParam(value = Author.LASTNAME_COLUMN_NAME) String lastName,
                       @RequestParam(value = Author.PATRONNAME_COLUMN_NAME) String patronName,
                       @RequestParam(value = Author.PHONENUMBER_COLUMN_NAME, required = false) String phoneNumber,
                       @RequestParam(value = Author.ADDRESS_COLUMN_NAME, required = false) String address,
                       @RequestParam(value = Author.DATEOFBIRTH_COLUMN_NAME, required = false) LocalDate dateOfBirth,
                       @RequestParam(value = Author.DATEOFDEATH_COLUMN_NAME, required = false) LocalDate dateOfDeath) {
        Author author = new Author();
        author.setName(name);
        author.setLastName(lastName);
        author.setPatronName(patronName);
        if (phoneNumber != null) {
            author.setPhoneNumber(phoneNumber);
        }
        if (address != null) {
            author.setAddress(address);
        }
        if (dateOfBirth != null) {
            try {
                author.setDateOfBirth(dateOfBirth);
            } catch (Exception e) {
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                e.printStackTrace(pw);
                String error = sw.toString();
                System.out.println("Error:\n" + error);
            }
        }
        if (dateOfDeath != null) {
            try {
                author.setDateOfDeath(dateOfDeath);
            } catch (Exception e) {
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                e.printStackTrace(pw);
                String error = sw.toString();
                System.out.println("Error:\n" + error);
            }
        }
        return authorRepository.save(author);
    }

    @PostMapping(path = {"/{id}"})
    public Author update(@RequestParam(value = Author.NAME_COLUMN_NAME, required = false) String name,
                         @RequestParam(value = Author.LASTNAME_COLUMN_NAME, required = false) String lastName,
                         @RequestParam(value = Author.PATRONNAME_COLUMN_NAME, required = false) String patronName,
                         @RequestParam(value = Author.PHONENUMBER_COLUMN_NAME, required = false) String phoneNumber,
                         @RequestParam(value = Author.ADDRESS_COLUMN_NAME, required = false) String address,
                         @RequestParam(value = Author.DATEOFBIRTH_COLUMN_NAME, required = false) LocalDate dateOfBirth,
                         @RequestParam(value = Author.DATEOFDEATH_COLUMN_NAME, required = false) LocalDate dateOfDeath,
                         @PathVariable Long id) throws Exception {
        authorRepository.findById(id).orElseThrow(() -> new AuthorNotFoundException(id));
        Author author = authorRepository.getOne(id);
        if (name != null) {
            author.setName(name);
        }
        if (lastName != null) {
            author.setLastName(lastName);
        }
        if (patronName != null) {
            author.setPatronName(patronName);
        }
        if (phoneNumber != null) {
            author.setPhoneNumber(phoneNumber);
        }
        if (address != null) {
            author.setAddress(address);
        }
        if (dateOfBirth != null) {
            author.setDateOfBirth(dateOfBirth);
        }
        if (dateOfDeath != null) {
            author.setDateOfDeath(dateOfDeath);
        }
        return authorRepository.save(author);
    }

    @DeleteMapping(path = {"/{id}"}) //RequestMapping(value = "/{id}",method=RequestMethod.DELETE)
    public void delete(@PathVariable("id") Long id) throws Exception {
        authorRepository.findById(id).orElseThrow(() -> new AuthorNotFoundException(id));
        authorRepository.deleteById(id);
        authorRepository.findAll();
    }

    @GetMapping(value = "/searchbylastname")
    public List<Author> findAuthorByLastName(@RequestParam(value = Author.LASTNAME_COLUMN_NAME) String lastName) {
        return authorRepository.findAuthorByLastName(lastName);
    }

}
