package com.malware.library.controllers;

import com.malware.library.exceptions.AuthorNotFoundException;
import com.malware.library.exceptions.BookNotFoundException;
import com.malware.library.exceptions.CategoryNotFoundException;
import com.malware.library.exceptions.PublisherNotFoundException;
import com.malware.library.model.Author;
import com.malware.library.model.Book;
import com.malware.library.model.Category;
import com.malware.library.model.Publisher;
import com.malware.library.repository.AuthorRepository;
import com.malware.library.repository.BookRepository;
import com.malware.library.repository.CategoryRepository;
import com.malware.library.repository.PublisherRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.*;

@RestController
@RequestMapping("/books")
public class BookController {

    @Autowired
    private BookRepository bookRepository;

    @Autowired
    private AuthorRepository authorRepository;

    @Autowired
    private PublisherRepository publisherRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @GetMapping
    public List<Book> findAll() {
        return bookRepository.findAll();
    }

    @GetMapping(path = {"/{id}"})
    public Book findOne(@PathVariable Long id) throws Exception {
        bookRepository.findById(id).orElseThrow(() -> new BookNotFoundException(id));
        Book book = bookRepository.getOne(id);
        return book;
    }

    @PutMapping
    public Book save(@RequestParam(value = Book.ISBN_COLUMN_NAME) String ISBN,
                     @RequestParam(value = Book.NAME_COLUMN_NAME, required = false) String name,
                     @RequestParam(value = Book.YEAROFPUBLISHING_COLUMN_NAME, required = false) Integer yearOfPublishing,
                     @RequestParam(value = Book.NUMBEROFCOPIES_COLUMN_NAME, required = false) Integer numberOfCopies,
                     @RequestParam(value = Book.ANNOTATION_COLUMN_NAME, required = false) String annotation,
                     @RequestParam(value = Book.PRICEPERDAY_COLUMN_NAME) Integer pricePerDay,
                     @RequestParam(value = Book.FINEPERDAY_COLUMN_NAME) Integer finePerDay,
                     @RequestParam(value = Book.PUBLISHERID_JOINCOLUMN_NAME, required = false) Long publisherId,
                     @RequestParam(value = Book.CATEGORYID_JOINCOLUMN_NAME) Long categoryId,
                     @RequestParam(value = Book.AUTHORS_COLUMN_NAME) List<Long> authors) throws Exception {
        Book book = new Book();
        book.setISBN(ISBN);
        book.setPricePerDay(pricePerDay);
        book.setFinePerDay(finePerDay);
        if (name != null) {
            book.setName(name);
        }
        if (yearOfPublishing != null) {
            book.setYearOfPublishing(yearOfPublishing);
        }
        if (numberOfCopies!= null) {
            book.setNumberOfCopies(numberOfCopies);
        }
        if (annotation != null) {
            book.setAnnotation(annotation);
        }
        if (publisherId != null) {
            publisherRepository.findById(publisherId).orElseThrow(() -> new PublisherNotFoundException(publisherId));
            Publisher publisher = publisherRepository.getOne(publisherId);
            book.setPublisher(publisher);
        }
        if (categoryId != null) {
            categoryRepository.findById(categoryId).orElseThrow(() -> new CategoryNotFoundException(categoryId));
            Category category = categoryRepository.getOne(categoryId);
            book.setCategory(category);
        }
        if (authors != null && !authors.isEmpty()) {
            for (Long authorId : authors) {
                book.addAuthor(authorRepository.findById(authorId).get());
            }
        }
        return bookRepository.save(book);
    }

    @PostMapping(path = {"/{id}"})
    public Book update(@RequestParam(value = Book.ISBN_COLUMN_NAME, required = false) String ISBN,
                       @RequestParam(value = Book.NAME_COLUMN_NAME, required = false) String name,
                       @RequestParam(value = Book.YEAROFPUBLISHING_COLUMN_NAME, required = false) Integer yearOfPublishing,
                       @RequestParam(value = Book.NUMBEROFCOPIES_COLUMN_NAME, required = false) Integer numberOfCopies,
                       @RequestParam(value = Book.ANNOTATION_COLUMN_NAME, required = false) String annotation,
                       @RequestParam(value = Book.PRICEPERDAY_COLUMN_NAME, required = false) Integer pricePerDay,
                       @RequestParam(value = Book.FINEPERDAY_COLUMN_NAME, required = false) Integer finePerDay,
                       @RequestParam(value = Book.PUBLISHERID_JOINCOLUMN_NAME, required = false) Long publisherId,
                       @RequestParam(value = Book.CATEGORYID_JOINCOLUMN_NAME, required = false) Long categoryId,
                       @RequestParam(value = Book.AUTHORS_COLUMN_NAME, required = false) List<Long> authors,
                       @PathVariable Long id) throws Exception {
        bookRepository.findById(id).orElseThrow(() -> new BookNotFoundException(id));
        Book book = bookRepository.getOne(id);
        if (ISBN != null) {
            book.setISBN(ISBN);
        }
        if (name != null) {
            book.setName(name);
        }
        if (yearOfPublishing != null) {
            book.setYearOfPublishing(yearOfPublishing);
        }
        if (numberOfCopies != null) {
            book.setNumberOfCopies(numberOfCopies);
        }
        if (annotation != null) {
            book.setAnnotation(annotation);
        }
        if (pricePerDay != null) {
            book.setPricePerDay(pricePerDay);
        }
        if (finePerDay != null) {
            book.setFinePerDay(finePerDay);
        }
        if (publisherId != null) {
            publisherRepository.findById(publisherId).orElseThrow(() -> new PublisherNotFoundException(publisherId));
            Publisher publisher = publisherRepository.getOne(publisherId);
            book.setPublisher(publisher);
        }
        if (categoryId != null) {
            categoryRepository.findById(categoryId).orElseThrow(() -> new CategoryNotFoundException(categoryId));
            Category category = categoryRepository.getOne(categoryId);
            book.setCategory(category);
        }
        if (authors != null && !authors.isEmpty()) {
            List <Long> oldAuthorsId = new ArrayList<>();
            for (Author author : book.getAuthors()) {
                oldAuthorsId.add(author.getId());
            }
            HashSet<Long> authorsIds = new HashSet<>();
            authorsIds.addAll(oldAuthorsId);
            for (Long author : authors) {
                if (authorsIds.contains(author)) {
                    authorsIds.remove(author);
                } else {
                    authorsIds.add(author);
                }
            }
            if (!authorsIds.isEmpty()) {
                for (Long author : authorsIds) {
                    if (oldAuthorsId.contains(author)) {
                        book.removeAuthor(new Author(author));
                    } else {
                        book.addAuthor(authorRepository.findById(author).get());
                    }
                }
        }
    }
        return bookRepository.save(book);
}

    @DeleteMapping(path = {"/{id}"}) //RequestMapping(value = "/{id}",method=RequestMethod.DELETE)
    public void delete(@PathVariable Long id) throws Exception {
        bookRepository.findById(id).orElseThrow(() -> new BookNotFoundException(id));
        bookRepository.deleteById(id);
        bookRepository.findAll();
    }

    @GetMapping(value = "/searchbypublisher")
    public List<Book> findBookByPublisherId(@RequestParam(value = Book.PUBLISHERID_JOINCOLUMN_NAME) Long publisherId) {
        return bookRepository.findBookByPublisherId(publisherId);
    }

    @GetMapping(value = "/searchbycategory")
    public List<Book> findBookByCategoryId(@RequestParam(value = Book.CATEGORYID_JOINCOLUMN_NAME) Long categoryId) {
        return bookRepository.findBookByCategoryId(categoryId);
    }

    @GetMapping(value = "/searchbyyear")
    public List<Book> findBookByYearOfPublishing(@RequestParam(value = Book.YEAROFPUBLISHING_COLUMN_NAME) Integer yearOfPublishing) {
        return bookRepository.findBookByYearOfPublishing(yearOfPublishing);
    }

    @GetMapping(value = "/searchbyname")
    public List<Book> findBookByName(@RequestParam(value = Book.NAME_COLUMN_NAME) String name) {
        return bookRepository.findBookByName(name);
    }

    @GetMapping(value = "/searchbyyearpublishername")
    public List<Book> findBookByYearPublisherName(@RequestParam(value = Book.YEAROFPUBLISHING_COLUMN_NAME) Integer yearOfPublishing,
                                                  @RequestParam(value = Book.PUBLISHERID_JOINCOLUMN_NAME) Long publisherId,
                                                  @RequestParam(value = Book.NAME_COLUMN_NAME) String name) {
        return bookRepository.findBookByYearPublisherName(yearOfPublishing, publisherId, name);
    }

    @GetMapping(value = "/searchbyauthor")
    public List<Book> findBookByAuthor(@RequestParam(value = Book.AUTHORID_JOINCOLUMN_NAME) Long authorId) {
        return bookRepository.findBookByAuthor(authorId);
    }

    @GetMapping(value = "/searchbyauthorandname")
    public List<Book> findBookByAuthorAndName(@RequestParam(value = Book.AUTHORID_JOINCOLUMN_NAME) Long authorId,
                                              @RequestParam(value = Book.NAME_COLUMN_NAME) String name) {
        return bookRepository.findBookByAuthorAndName(authorId, name);
    }


}
