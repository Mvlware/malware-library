package com.malware.library.controllers;

import com.malware.library.exceptions.CategoryNotFoundException;
import com.malware.library.exceptions.MapNotFoundValueException;
import com.malware.library.model.Book;
import com.malware.library.model.Category;
import com.malware.library.model.Country;
import com.malware.library.model.CountryHash;
import com.malware.library.repository.CategoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping({"/categories"})
public class CategoryController {

    @Autowired
    private CategoryRepository categoryRepository;

    @GetMapping
    public List<Category> findAll() {
        return categoryRepository.findAll();
    }

    @GetMapping(path = {"/{id}"})
    public Category findOne(@PathVariable Long id) throws Exception {
        categoryRepository.findById(id).orElseThrow(() -> new CategoryNotFoundException(id));
        Category category = categoryRepository.getOne(id);
        return category;
    }

    @PutMapping
    public Category save(@RequestParam(value = Category.NAME_COLUMN_NAME) String name,
                         @RequestParam (value = Category.PARENTID_COLUMN_NAME, required = false) Long parentId) throws Exception {
        Category category = new Category();
//        peoples.stream().filter((p)-> p.getAge() >= 18 && p.getAge() < 27
//                && p.getSex() == Sex.MAN).collect(Collectors.toList())
        category.setName(name);
        if (parentId != null) {
            categoryRepository.findById(parentId).orElseThrow(() -> new CategoryNotFoundException(parentId));
            Category parentCategory = categoryRepository.getOne(parentId);
            if (parentCategory != null) {
                category.setCategory(parentCategory);
            }
        }
        return categoryRepository.save(category);
//        if (name != null) {
//            CountryHash.HASHCOUNTRY.entrySet().stream()
////                  .filter(entry -> entry.getKey().contains(name)) // ??
//                    .filter(entry -> entry.getKey().toLowerCase().contains(name.trim().toLowerCase()))
//                    .map(Map.Entry::getKey)
//                    .findFirst()
//                    .orElseThrow(() -> new MapNotFoundValueException("HASHCOUNTRY", name));
//            country.setName(Country.toUpperCaseForFirstLetter(name.trim()));
//        }
    }

    @PostMapping(path = {"/{id}"})
    public Category update(@RequestParam(value = Category.NAME_COLUMN_NAME, required = false) String name,
                           @RequestParam (value = Category.PARENTID_COLUMN_NAME, required = false) Long parentId,
                           @PathVariable Long id) throws Exception {
        categoryRepository.findById(id).orElseThrow(() -> new CategoryNotFoundException(id));
        Category category = categoryRepository.getOne(id);
        if (name != null) {
            category.setName(name);
        }
        if (parentId != null) {
            categoryRepository.findById(parentId).orElseThrow(() -> new CategoryNotFoundException(parentId));
            Category parentCategory = categoryRepository.getOne(parentId);
                if (parentCategory != null) {
                    category.setCategory(parentCategory);
                }
            }
        return categoryRepository.save(category);
    }

    @DeleteMapping(path ={"/{id}"}) //RequestMapping(value = "/{id}",method=RequestMethod.DELETE)
    public void delete(@PathVariable("id") Long id) throws Exception {
        categoryRepository.findById(id).orElseThrow(() -> new CategoryNotFoundException(id));
        categoryRepository.deleteById(id);
        categoryRepository.findAll();
    }

    @GetMapping(value = "/searchbyparentcategory")
    public List<Category> findCategoryByParentCategory(@RequestParam(value = Category.PARENTID_COLUMN_NAME) Long categoryId) {
        return categoryRepository.findCategoryByParentCategory(categoryId);
    }

}
