package com.malware.library.controllers;

import com.malware.library.exceptions.BookNotFoundException;
import com.malware.library.exceptions.CategoryNotFoundException;
import com.malware.library.exceptions.CountryNotFoundException;
import com.malware.library.exceptions.MapNotFoundValueException;
import com.malware.library.model.Book;
import com.malware.library.model.Country;
import com.malware.library.model.CountryHash;
import com.malware.library.repository.CountryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/countries")
public class CountryController {

    @Autowired
    private CountryRepository countryRepository;

    @GetMapping
    public List<Country> findAll() {
        return countryRepository.findAll();
    }

    @GetMapping(path = {"/{id}"})
    public Country findOne(@PathVariable Long id) throws Exception {
        countryRepository.findById(id).orElseThrow(() -> new CountryNotFoundException(id));
        Country country = countryRepository.getOne(id);
        return country;
    }

    @PutMapping
    public Country save(@RequestParam(value = Country.NAME_COLUMN_NAME) String name) throws Exception {
        Country country = new Country();
//        HashMap<String, String> countries = new HashMap<>();
//        countries.putAll(CountryHash.HASHCOUNTRY);
//        for (Map.Entry<String, String> pair : CountryHash.HASHCOUNTRY.entrySet()) {
////            char[] s = name.trim().toCharArray();
////            String string2 = (Character.toUpperCase(name.charAt(0)));
////            for (int i = 1; i < string.length(); i++) {
////                string2 = string2 + string.charAt(i);
////                if ((string.charAt(i) == " ") && (string.charAta(i + 1) != " ")) {
////                    string2 = string2 + (Character.toUpperCase(string.charAt(i + 1)));
////                    i++;
////                }
////            }
//            if (pair.getKey().equalsIgnoreCase(name.trim())) {
//                country.setName(name);
//            }
////            else
////                pair.getKey().compareToIgnoreCase(name.trim());
//        }
            CountryHash.HASHCOUNTRY.entrySet().stream()
//                    .filter(entry -> entry.getKey().contains(name)) // ??
                    .filter(entry -> entry.getKey().toLowerCase().contains(name.trim().toLowerCase()))
                    .map(Map.Entry::getKey)
                    .findFirst()
                    .orElseThrow(() -> new MapNotFoundValueException("HASHCOUNTRY", name));
            country.setName(Country.toUpperCaseForFirstLetter(name.trim()));
//            country.setName(toUpperCase(name.trim().charAt(0)));
        return countryRepository.save(country);
    }

    @PostMapping(path = {"/{id}"})
    public Country update(@RequestParam(value = Country.NAME_COLUMN_NAME, required = false) String name,
                          @PathVariable Long id) throws Exception {
        countryRepository.findById(id).orElseThrow(() -> new CountryNotFoundException(id));
        Country country = countryRepository.getOne(id);
        if (name != null) {
            CountryHash.HASHCOUNTRY.entrySet().stream()
//                    .filter(entry -> entry.getKey().contains(name)) // ??
                    .filter(entry -> entry.getKey().toLowerCase().contains(name.trim().toLowerCase()))
                    .map(Map.Entry::getKey)
                    .findFirst()
                    .orElseThrow(() -> new MapNotFoundValueException("HASHCOUNTRY", name));
            country.setName(Country.toUpperCaseForFirstLetter(name.trim()));
        }
        return countryRepository.save(country);
        }
    //Update

    @DeleteMapping(path = {"/{id}"}) //RequestMapping(value = "/{id}",method=RequestMethod.DELETE)
    public void delete(@PathVariable Long id) throws Exception {
        countryRepository.findById(id).orElseThrow(() -> new CountryNotFoundException(id));
        countryRepository.deleteById(id);
        countryRepository.findAll();
    }
}
