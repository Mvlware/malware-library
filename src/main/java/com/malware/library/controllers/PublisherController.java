package com.malware.library.controllers;

import com.malware.library.exceptions.CountryNotFoundException;
import com.malware.library.exceptions.PublisherNotFoundException;
import com.malware.library.model.Book;
import com.malware.library.model.Country;
import com.malware.library.model.Publisher;
import com.malware.library.repository.CountryRepository;
import com.malware.library.repository.PublisherRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping({"/publishers"})
public class PublisherController {

    @Autowired
    private PublisherRepository publisherRepository;

    @Autowired
    private CountryRepository countryRepository;

    @GetMapping
    public List<Publisher> findAll() {
        return publisherRepository.findAll();
    }

    @GetMapping(path = {"/{id}"})
    public Publisher findOne(@PathVariable Long id) throws Exception {
        publisherRepository.findById(id).orElseThrow(() -> new PublisherNotFoundException(id));
        Publisher publisher = publisherRepository.getOne(id);
        return publisher;
    }

    @PutMapping
    public Publisher save(@RequestParam(value = Publisher.NAME_COLUMN_NAME) String name,
                          @RequestParam(value = Publisher.ADDRESS_COLUMN_NAME, required = false) String address,
                          @RequestParam (value = Publisher.COUNTRYID_COLUMN_NAME, required = false) Long countryId) throws Exception {
        Publisher publisher = new Publisher();
        publisher.setName(name);
        if (address != null && !address.isEmpty()) {
            publisher.setAddress(address);
        }
        if (countryId != null) {
            countryRepository.findById(countryId).orElseThrow(() -> new CountryNotFoundException(countryId));
            Country country = countryRepository.getOne(countryId);
            if (country != null) {
                publisher.setCountry(country);
            }
        }
        return publisherRepository.save(publisher);
    }

    @PostMapping(path = {"/{id}"})
    public Publisher update(@RequestParam(value = Publisher.NAME_COLUMN_NAME, required = false) String name,
                            @RequestParam(value = Publisher.ADDRESS_COLUMN_NAME, required = false) String address,
                            @RequestParam (value = Publisher.COUNTRYID_COLUMN_NAME, required = false) Long countryId,
                            @PathVariable Long id) throws Exception {
        publisherRepository.findById(id).orElseThrow(() -> new PublisherNotFoundException(id));
        Publisher publisher = publisherRepository.getOne(id);
        if (name != null && !name.isEmpty()) {
            publisher.setName(name);
        }
        if (address != null && !address.isEmpty()) {
            publisher.setAddress(address);
        }
        if (countryId != null) {
            countryRepository.findById(countryId).orElseThrow(() -> new CountryNotFoundException(countryId));
            Country country = countryRepository.getOne(countryId);
            if (country != null) {
                publisher.setCountry(country);
            }
        }
        return publisherRepository.save(publisher);
    }

    @DeleteMapping(path ={"/{id}"}) //RequestMapping(value = "/{id}",method=RequestMethod.DELETE)
    public void delete(@PathVariable("id") Long id) throws Exception {
        publisherRepository.findById(id).orElseThrow(() -> new PublisherNotFoundException(id));
        publisherRepository.deleteById(id);
        publisherRepository.findAll();
    }

    @GetMapping(value = "/searchbycountry")
    public List<Publisher> findPublisherByCountryId(@RequestParam(value = Publisher.COUNTRYID_COLUMN_NAME) Long categoryId) {
        return publisherRepository.findPublisherByCountryId(categoryId);
    }

}
