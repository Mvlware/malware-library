package com.malware.library.controllers;

import com.malware.library.exceptions.RoleNotFoundException;
import com.malware.library.model.Role;
import com.malware.library.repository.RoleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping({"/roles"})
public class RoleController {

    @Autowired
    RoleRepository roleRepository;

    @GetMapping
    public List<Role> findAll() {
        return roleRepository.findAll();
    }

    @GetMapping(path = {"/{id}"})
    public Role findOne(@PathVariable Long id) throws Exception{
        roleRepository.findById(id).orElseThrow(() -> new RoleNotFoundException(id));
        Role role = roleRepository.getOne(id);
        return role;
    }

    @PutMapping
    public Role save(@RequestParam(value = Role.NAME_COLUMN_NAME) String name) {
        Role role = new Role();
        role.setName(name);
        return roleRepository.save(role);
    }

    @PostMapping(path = {"/{id}"})
    public Role update(@RequestParam(value = Role.NAME_COLUMN_NAME) String name,
                       @PathVariable Long id) throws Exception {
        roleRepository.findById(id).orElseThrow(() -> new RoleNotFoundException(id));
        Role role = roleRepository.getOne(id);
        if (name != null) {
            role.setName(name);
        }
        return roleRepository.save(role);
    }

    @DeleteMapping(path = {"/{id}"}) //RequestMapping(value = "/{id}",method=RequestMethod.DELETE)
    public void delete(@PathVariable("id") Long id) throws Exception {
        roleRepository.findById(id).orElseThrow(() -> new RoleNotFoundException(id));
        roleRepository.deleteById(id);
        roleRepository.findAll();
    }

}
