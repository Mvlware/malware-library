package com.malware.library.controllers;

import com.malware.library.exceptions.*;
import com.malware.library.model.*;
import com.malware.library.repository.RoleRepository;
import com.malware.library.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

@RestController
@RequestMapping("/users")
public class UserController {

    @Autowired
    UserRepository userRepository;

    @Autowired
    RoleRepository roleRepository;

    @GetMapping
    public List<User> findAll() {
        return userRepository.findAll();
    }

    @GetMapping(path = {"/{id}"}) //@RequestMapping(value = "/{id}",method=RequestMethod.GET)
    public User findOne(@PathVariable Long id) throws Exception{
        userRepository.findById(id).orElseThrow(() -> new UserNotFoundException(id));
        User user = userRepository.getOne(id);
        return user;
    }

    @PutMapping
    public User save(@RequestParam(value = User.USERNAME_COLUMN_NAME) String username,
                     @RequestParam(value = User.PASSWORD_COLUMN_NAME) String password,
                     @RequestParam(value = User.NAME_COLUMN_NAME) String name,
                     @RequestParam(value = User.LASTNAME_COLUMN_NAME) String lastName,
                     @RequestParam(value = User.PATRONNAME_COLUMN_NAME) String patronName,
                     @RequestParam(value = User.DATEOFBIRTH_COLUMN_NAME, required = false) LocalDate dateOfBirth,
                     @RequestParam(value = User.DATEOFREGISTRATION_COLUMN_NAME) LocalDate dateOfRegistration,
                     @RequestParam(value = User.ROLES_COLUMN_NAME) List<Long> roles) throws Exception {
        User user = new User();
        user.setUsername(username);
        user.setPassword(password);
        user.setName(name);
        user.setLastName(lastName);
        user.setPatronName(patronName);
        try {
            user.setDateOfRegistration(dateOfRegistration);
        } catch (Exception e) {
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            String error = sw.toString();
            System.out.println("Error:\n" + error);
        }
        if (dateOfBirth != null) {
            try {
                user.setDateOfBirth(dateOfBirth);
            } catch (Exception e) {
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                e.printStackTrace(pw);
                String error = sw.toString();
                System.out.println("Error:\n" + error);
            }
        }
        if (roles != null && !roles.isEmpty()) {
            for (Long roleId : roles) {
                user.addRole(roleRepository.findById(roleId).get());
            }
        }
        return userRepository.save(user);
    }

    @PostMapping(path = {"/{id}"})
    public User update(@RequestParam(value = User.USERNAME_COLUMN_NAME, required = false) String username,
                       @RequestParam(value = User.PASSWORD_COLUMN_NAME, required = false) String password,
                       @RequestParam(value = User.NAME_COLUMN_NAME, required = false) String name,
                       @RequestParam(value = User.LASTNAME_COLUMN_NAME, required = false) String lastName,
                       @RequestParam(value = User.PATRONNAME_COLUMN_NAME, required = false) String patronName,
                       @RequestParam(value = User.DATEOFBIRTH_COLUMN_NAME, required = false) LocalDate dateOfBirth,
                       @RequestParam(value = User.DATEOFREGISTRATION_COLUMN_NAME, required = false) LocalDate dateOfRegistration,
                       @RequestParam(value = User.ROLES_COLUMN_NAME, required = false) List<Long> roles,
                       @PathVariable Long id) throws Exception {
        userRepository.findById(id).orElseThrow(() -> new UserNotFoundException(id));
        User user = userRepository.getOne(id);
        if (username != null) {
            user.setUsername(username);
        }
        if (password != null) {
            user.setLastName(password);
        }
        if (name != null) {
            user.setName(name);
        }
        if (lastName != null) {
            user.setLastName(lastName);
        }
        if (patronName != null) {
            user.setPatronName(patronName);
        }
        if (dateOfBirth != null) {
            user.setDateOfBirth(dateOfBirth);
        }
        if (dateOfRegistration != null) {
            user.setDateOfRegistration(dateOfRegistration);
        }
        if (roles != null && !roles.isEmpty()) {
            List<Long> oldRolesId = new ArrayList<>();
            for (Role role : user.getRoles()) {
                oldRolesId.add(role.getId());
            }
            HashSet<Long> rolesIds = new HashSet<>();
            rolesIds.addAll(oldRolesId);
            for (Long role : roles) {
                if (rolesIds.contains(role)) {
                    rolesIds.remove(role);
                } else {
                    rolesIds.add(role);
                }
            }
            if (!rolesIds.isEmpty()) {
                for (Long role : rolesIds) {
                    if (oldRolesId.contains(role)) {
                        user.removeRole(new Role(role));
                    } else {
                        user.addRole(roleRepository.findById(role).get());
                    }
                }
            }
        }
        return userRepository.save(user);
    }

    @DeleteMapping(path = {"/{id}"}) //RequestMapping(value = "/{id}",method=RequestMethod.DELETE)
    public void delete(@PathVariable("id") Long id) throws Exception {
        userRepository.findById(id).orElseThrow(() -> new UserNotFoundException(id));
        userRepository.deleteById(id);
        userRepository.findAll();
    }

}
