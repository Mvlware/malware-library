package com.malware.library.model;

import com.fasterxml.jackson.annotation.JsonFormat;
//import org.hibernate.validator.internal.constraintvalidators.bv.PatternValidator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.springframework.format.annotation.DateTimeFormat;
//import org.springframework.validation.annotation.Validated;

import javax.persistence.*;
//import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import java.time.LocalDate;
import java.util.*;

@Entity(name = Author.ENTITY_NAME)
@Table(name = Author.TABLE_NAME)
//@Validated
public class Author {
    public static final String ENTITY_NAME = "Author";
    public static final String TABLE_NAME = "author";
    public static final String NAME_COLUMN_NAME = "name";
    public static final String LASTNAME_COLUMN_NAME = "last_name";
    public static final String PATRONNAME_COLUMN_NAME = "patron_name";
    public static final String PHONENUMBER_COLUMN_NAME = "phone_number";
    public static final String ADDRESS_COLUMN_NAME = "address";
    public static final String DATEOFBIRTH_COLUMN_NAME = "date_of_birth";
    public static final String DATEOFDEATH_COLUMN_NAME = "date_of_death";

    @Column(nullable = false, insertable = true, updatable = true)
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO) //.AUTO? SEQUENCE? IDENTITY? УЗНАТЬ!
    private Long id;

    @Column(name = NAME_COLUMN_NAME, nullable = false, insertable = true, updatable = true, length = 20)
    @Pattern(regexp = "^[АA-яz][аa-яz]*(\\s(([аa-яz]{1,3})|(([аa-яz]+\\')?[АA-яz][аa-яz]*)))*$", message = "Name is not valid, please use pattern: [АA-ЯZаa-яz] and length <= 20")
    @Size(min = 1, max = 20)
    @NotNull
    private String name;

    @Column(name = LASTNAME_COLUMN_NAME, nullable = false, insertable = true, updatable = true, length = 30)
    @Pattern(regexp = "^[АA-яz][аa-яz]*(\\s(([аa-яz]{1,3})|(([аa-яz]+\\')?[АA-яz][аa-яz]*)))*$", message = "Lastname is not valid, please use pattern: [АA-ЯZаa-яz] and length <= 30")
    @Size(min = 1, max = 30)
    @NotNull
    private String lastName;

    @Column(name = PATRONNAME_COLUMN_NAME, nullable = false, insertable = true, updatable = true, length = 30)
    @Pattern(regexp = "^[АA-яz][аa-яz]*(\\s(([аa-яz]{1,3})|(([аa-яz]+\\')?[АA-яz][аa-яz]*)))*$", message = "Patronymic is not valid, please use pattern: [АA-ЯZаa-яz] and length <= 30")
    @Size(min = 1, max = 30)
    @NotNull
    private String patronName;

    @Column(name = PHONENUMBER_COLUMN_NAME, nullable = true, insertable = true, updatable = true, length = 12)
    @Pattern(regexp = "(\\+7|8)[0-9]{10}", message = "Phone number is not valid, please use pattern: +7|8)[0-9]{10}")
    @Size(min = 11, max = 12)
    private String phoneNumber;

    @Column(name = ADDRESS_COLUMN_NAME, nullable = true, insertable = true, updatable = true, length = 100)
    @Size(min = 0, max = 100, message = "Address is not valid, please use pattern length <= 100")
    private String address;

    @Column(name = DATEOFBIRTH_COLUMN_NAME, nullable = true, insertable = true, updatable = true)
    @DateTimeFormat(pattern = "dd.MM.yyyy")
    @JsonFormat(pattern = "dd.MM.yyyy", timezone="GMT+8")
    private LocalDate dateOfBirth;

    @Column(name = DATEOFDEATH_COLUMN_NAME, nullable = true, insertable = true, updatable = true)
    @DateTimeFormat(pattern = "dd.MM.yyyy")
    @JsonFormat(pattern = "dd.MM.yyyy", timezone="GMT+8")
    private LocalDate dateOfDeath;

//    @OneToOne (mappedBy = "author", cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH}) //CascadeType.All
//    private Book book;

//    Uni-directional Однонаправленная связь ONE TO MANY
//    @OneToMany (fetch = FetchType.LAZY, cascade = CascadeType.ALL) //fetch - RelationsTest
//    @JoinColumn (name = "owner_id")
//    private List<Phone> phones;

    @JsonIgnore
    @ManyToMany(mappedBy = Book.AUTHORS_COLUMN_NAME, fetch = FetchType.LAZY, cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    private Set<Book> books = new HashSet<>();
//    Если использоватьс private List<Book> books = new ArrayList<>(), то вместо одной записи book_has_author Hibernate будет удалять все строки
//    book_has_author, связанные с данным book_id, и повторно вставлять оставшиеся. Это неэффективно для базы данных, особенно для повторного создания индексов, связанных с базовыми внешними ключами.
//    Поэтому лучше не использовать List для ассоциаций @ManyToMany JPA, а вместо этого использовать Set

    public Author() {
    }

    public Author(Long id) {
        this.id = id;
    }

    public Author(String name, String lastName, String patronName, String phoneNumber, String address, LocalDate dateOfBirth, LocalDate dateOfDeath) {
        this.name = name;
        this.lastName = lastName;
        this.patronName = patronName;
        this.phoneNumber = phoneNumber;
        this.address = address;
        this.dateOfBirth = dateOfBirth;
        this.dateOfDeath = dateOfDeath;
    }

    public Author(String name, String lastName, String patronName) {
        this.name = name;
        this.lastName = lastName;
        this.patronName = patronName;
        this.phoneNumber = null;
        this.address = null;
        this.dateOfBirth = null;
        this.dateOfDeath = null;
    }

//    public List<Phone> getPhones() { return phones; }
//    public void setPhones(List<Phone> phones) { this.phones = phones; }

    public Set<Book> getBooks() { return books; }

    public void setBooks(Set<Book> books) { this.books = books; }

//    public void addBook(Book book) {
//        books.add(book);
//    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getPatronName() {
        return patronName;
    }

    public void setPatronName(String patronName) {
        this.patronName = patronName;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public LocalDate getDateOfBirth() {
        return dateOfBirth;
    }

    public void setDateOfBirth(LocalDate dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    public LocalDate getDateOfDeath() {
        return dateOfDeath;
    }

    public void setDateOfDeath(LocalDate dateOfDeath) {
        this.dateOfDeath = dateOfDeath;
    }

//    @Override
//    public String toString() {
//        return "\nAuthor{" +
//                "id=" + id +
//                ", name='" + name + '\'' +
//                ", lastName='" + lastName + '\'' +
//                ", patronName='" + patronName + '\'' +
//                ", phoneNumber='" + phoneNumber + '\'' +
//                ", address='" + address + '\'' +
//                ", date_of_birth=" + date_of_birth +
//                ", date_of_death=" + date_of_death +
//                ", books=" + books +
//                '}';
//    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o instanceof Long)
            return id.equals((Long) o);
        if (o == null || getClass() != o.getClass()) return false;
        Author author = (Author) o;
//        if (!Objects.equals(name, author.name)) return false;
//        if (!Objects.equals(lastName, author.lastName)) return false;
//        if (!Objects.equals(patronName, author.patronName)) return false;
//        if (!Objects.equals(phoneNumber, author.phoneNumber)) return false;
//        if (!Objects.equals(address, author.address)) return false;
//        if (!Objects.equals(date_of_birth, author.date_of_birth)) return false;
//        if (!Objects.equals(date_of_death, author.date_of_death)) return false;

        return Objects.equals(id, author.id);
    }

//
//    @Override
//    public int hashCode() {
//        return Objects.hash(id, name, lastName, patronName, phoneNumber, address, date_of_birth, date_of_death, books);
//    }

}
