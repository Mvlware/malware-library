package com.malware.library.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.util.List;
import java.util.Objects;

@Entity(name = Country.ENTITY_NAME)
@Table(name = Country.TABLE_NAME)
public class Country {
    public static final String ENTITY_NAME = "Country";
    public static final String TABLE_NAME = "country";
    public static final String NAME_COLUMN_NAME = "name";

    @Column(nullable = false, insertable = true, updatable = true)
    @Id
    @GeneratedValue(strategy= GenerationType.AUTO) //AUTO? SEQUENCE? IDENTITY?
    private Long id;

    @Column(name = NAME_COLUMN_NAME, nullable = false, insertable = true, updatable = true)
    @NotNull
    private String name;

    @JsonIgnore
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
    @OneToMany (mappedBy = TABLE_NAME, fetch = FetchType.LAZY, cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    private List<Publisher> publishers;

    public Country() {
    }

    public Country(String name) {
        this.name = name;
    }

    public List<Publisher> getPublishers() {
        return publishers;
    }

    public void setPublishers(List<Publisher> publishers) {
        if (publishers != null) {
            publishers.forEach(a-> {
                a.setCountry(this);
            });
        }
        this.publishers = publishers;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public static String toUpperCaseForFirstLetter(String text) {
        StringBuilder builder = new StringBuilder(text);
        //выставляем первый символ заглавным, если это буква
        if (Character.isAlphabetic(text.codePointAt(0)))
            builder.setCharAt(0, Character.toUpperCase(text.charAt(0)));
        //меняем буквы, перед которыми пробел на заглавные
        for (int i = 1; i < text.length(); i++)
            if (Character.isAlphabetic(text.charAt(i)) && Character.isSpaceChar(text.charAt(i - 1)))
                builder.setCharAt(i, Character.toUpperCase(text.charAt(i)));
        return builder.toString();
    }

//    @Embeddable
//    public class CountryId implements Serializable {
//        private int countryId;
//        private String countryName;
//
//        public CountryId() {
//        }
//
//        public CountryId(int countryId, String countryName) {
//            this.countryId = countryId;
//            this.countryName = countryName;
//        }
//
//        @Override
//        public boolean equals(Object o) {
//            if (this == o) return true;
//            if (o == null || getClass() != o.getClass()) return false;
//            CountryId countryId1 = (CountryId) o;
//            if (countryId != countryId1.countryId) return false;
//            return countryName.equals(countryId1.countryName);
//        }
//
//        @Override
//        public int hashCode() {
//            return Objects.hash(countryId, countryName);
//        }
//    }

}
