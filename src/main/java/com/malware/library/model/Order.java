package com.malware.library.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.hibernate.annotations.Proxy;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import javax.validation.constraints.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;
import java.util.HashSet;
import java.util.Set;

@Entity(name = Order.ENTITY_NAME)
@Table(name = Order.TABLE_NAME)
public class Order {
    public static final String ENTITY_NAME = "Order";
    public static final String TABLE_NAME = "order";
    public static final String JOINTABLE_NAME = "books";
    public static final String PRICE_COLUMN_NAME = "price";
    public static final String FINE_COLUMN_NAME = "fine";
    public static final String DATEORDEROPEN_COLUMN_NAME = "date_order_open";
    public static final String DATEBOOKSRETURN_COLUMN_NAME = "date_books_return";
    public static final String COUNTDAYBOOKRETURN = "count_day_book_return";
    public static final String DATEORDERCLOSE_COLUMN_NAME = "date_order_close";
    public static final String CUSTOMERID_JOINCOLUMN_NAME = "customer_id";
    public static final String MANAGERID_JOINCOLUMN_NAME = "manager_id";
    public static final String BOOKIDDATES_MAP_NAME = "book_id_date";

    @Column(nullable = false, insertable = true, updatable = true)
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @Column(name = PRICE_COLUMN_NAME, nullable = false, insertable = true, updatable = true, length = 10)
//    @Pattern(regexp = "[0-9]", message = "Number is not valid, please use pattern: [0-9] and length <= 10")
//    @Size(min = 1, max = 10, message = "No more 10 characters")
    @Min(value = 0)
    @Max(value = Integer.MAX_VALUE)
    @NotNull
    private int price;

    @Column(name = FINE_COLUMN_NAME, nullable = false, insertable = true, updatable = true, length = 10)
//    @Pattern(regexp = "[0-9]", message = "Number is not valid, please use pattern: [0-9] and length <= 10")
//    @Size(min = 1, max = 10, message = "No more 10 characters")
    @Min(value = 0)
    @Max(value = Integer.MAX_VALUE)
    @NotNull
    private int fine;

    @Column(name = DATEORDEROPEN_COLUMN_NAME, nullable = true, insertable = true, updatable = true)
    @DateTimeFormat(pattern = "dd.MM.yyyy")
    @JsonFormat(pattern = "dd.MM.yyyy", timezone="GMT+8")
    private LocalDate dateOrderOpen;

    @Column(name = DATEBOOKSRETURN_COLUMN_NAME, nullable = true, insertable = true, updatable = true)
    @DateTimeFormat(pattern = "dd.MM.yyyy")
    @JsonFormat(pattern = "dd.MM.yyyy", timezone="GMT+8")
    private LocalDate dateBooksReturn;

    @Column(name = DATEORDERCLOSE_COLUMN_NAME, nullable = true, insertable = true, updatable = true)
    @DateTimeFormat(pattern = "dd.MM.yyyy")
    @JsonFormat(pattern = "dd.MM.yyyy", timezone="GMT+8")
    private LocalDate dateOrderClose;

    @ManyToOne(cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    @JoinColumn(name = CUSTOMERID_JOINCOLUMN_NAME)
    @NotNull
    private User customer;

    @ManyToOne(cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    @JoinColumn(name = MANAGERID_JOINCOLUMN_NAME)
    @NotNull
    private User manager;

    @JsonIgnore
    @OneToMany(mappedBy = "primaryKey.orderId", cascade = CascadeType.ALL)
    private Set<OrderBook> orderBooks = new HashSet<>();

    public Order() {
    }

    public Long getId() { return id; }

    public void setId(Long id) { this.id = id; }

    public int getPrice() { return price; }

    public void setPrice(int price) { this.price = price; }

    public int getFine() { return fine; }

    public void setFine(int fine) { this.fine = fine; }

    public LocalDate getDateOrderOpen() { return dateOrderOpen; }

    public void setDateOrderOpen(LocalDate dateOrderOpen) { this.dateOrderOpen = dateOrderOpen; }

    public LocalDate getDateBooksReturn() { return dateBooksReturn; }

    public void setDateBooksReturn(LocalDate dateBooksReturn) { this.dateBooksReturn = dateBooksReturn; }

    public LocalDate getDateOrderClose() { return dateOrderClose; }

    public void setDateOrderClose(LocalDate dateOrderClose) { this.dateOrderClose = dateOrderClose; }

    public Set<OrderBook> getOrderBooks() { return orderBooks; }

    public void setOrderBooks(Set<OrderBook> books) { this.orderBooks = books; }

    public void addUserGroup(OrderBook orderBook) { this.orderBooks.add(orderBook); }

    public User getCustomer() { return customer; }

    public void setCustomer(User customer) { this.customer = customer; }

    public User getManager() { return manager; }

    public void setManager(User manager) { this.manager = manager; }

//    // Методы добавления обязательны для двунаправленных связей MANY TO MANY, чтобы убедиться, что обе стороны связи синхронизированы
//    public void addBook(OrderBook book) {
//        orderBooks.add(book);
////        book.getOrderBooks().add(this);
//    }
//
//    // Методы удаления обязательны для двунаправленных связей MANY TO MANY, чтобы убедиться, что обе стороны связи синхронизированы
//    public void removeBook(OrderBook book) {
//        orderBooks.remove(book);
////        book.getOrderBooks().remove(this);
//    }
//
//    @Override
//    public String toString() {
//        return "Order{" +
//                "id=" + id +
//                ", price=" + price +
//                ", fine=" + fine +
//                ", dateOrderOpen=" + dateOrderOpen +
//                ", dateBookReturn=" + dateBookReturn +
//                ", dateOrderClose=" + dateOrderClose +
//                ", customer=" + customer +
//                ", manager=" + manager +
//                ", orderBooks=" + orderBooks +
//                '}';
//    }

}
