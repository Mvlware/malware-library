package com.malware.library.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import java.util.List;

@Entity (name = Publisher.ENTITY_NAME)
@Table(name = Publisher.TABLE_NAME)
public class Publisher {
    public static final String ENTITY_NAME = "Publisher";
    public static final String TABLE_NAME = "publisher";
    public static final String NAME_COLUMN_NAME = "name";
    public static final String ADDRESS_COLUMN_NAME = "address";
    public static final String COUNTRYID_COLUMN_NAME = "country_id";

    @Column
    @Id
    @GeneratedValue(strategy= GenerationType.SEQUENCE) //.AUTO? SEQUENCE? IDENTITY? УЗНАТЬ!
    private Long id;

    @Column(name = NAME_COLUMN_NAME, nullable = false, insertable = true, updatable = true, length = 40)
    @Pattern(regexp = "^[АA-яz][аa-яz]*(\\s(([аa-яz]{1,3})|(([аa-яz]+\\')?[АA-яz][аa-яz]*)))*$", message = "Name is not valid, please use pattern: [АA-ЯZаa-яz] and length <= 40")
    @Size(min = 1, max = 40)
    @NotNull
    private String name;

    @Column(name = ADDRESS_COLUMN_NAME, nullable = true, insertable = true, updatable = true, length = 100)
    @Size(min = 1, max = 100, message = "Address is not valid, please use pattern length <= 120")
    private String address;

    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
    @ManyToOne(fetch = FetchType.LAZY, cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    @JoinColumn(name = COUNTRYID_COLUMN_NAME)
    private Country country;

    @JsonIgnore
    @OneToMany (mappedBy = TABLE_NAME, fetch = FetchType.LAZY, cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    private List<Book> books;

    public Publisher() {
    }

    public Publisher(String name, String address, Country country) {
        this.name = name;
        this.address = address;
        this.country = country;
    }

    public Publisher(String name, String address) {
        this.name = name;
        this.address = address;
        this.country = null;
    }

    public Publisher(String name) {
        this.name = name;
        this.address = null;
        this.country = null;
    }

    public List<Book> getBooks() {
        return books;
    }

    public void setBooks(List<Book> books) {
        if (books != null) {
            books.forEach(a-> {
                a.setPublisher(this);
            });
        }
        this.books = books;
    }

    public Country getCountry() {
        return country;
    }

    public void setCountry(Country country) {
        this.country = country;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

//    @Override
//    public String toString() {
//        return "\nPublisher{" +
//                "id=" + id +
//                ", name='" + name + '\'' +
//                ", address='" + address + '\'' +
//                ", books=" + books +
//                '}';
//    }
//    @Override
//    public boolean equals(Object o) {
//        if (this == o) return true;
//        if (!(o instanceof Publisher)) return false;
//        Publisher publisher = (Publisher) o;
//        return Objects.equals(id, publisher.id) &&
//                Objects.equals(name, publisher.name) &&
//                Objects.equals(address, publisher.address) &&
//                Objects.equals(book, publisher.book);
//    }
//    @Override
//    public int hashCode() {
//        return Objects.hash(id, name, address, book);
//    }

}
