package com.malware.library.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import org.springframework.security.core.GrantedAuthority;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

@Entity(name = Role.ENTITY_NAME)
@Table(name = Role.TABLE_NAME)
public class Role implements GrantedAuthority {
    public static final String ENTITY_NAME = "Role";
    public static final String TABLE_NAME = "role";
    public static final String NAME_COLUMN_NAME = "name";

    @Column(nullable = false, insertable = true, updatable = true)
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO) //.AUTO? SEQUENCE? IDENTITY? УЗНАТЬ!
    private Long id;

    @Column(name = NAME_COLUMN_NAME, nullable = false, insertable = true, updatable = true)
    private String name;

//    @Transient
    @JsonIgnore
    @ManyToMany(mappedBy = User.ROLES_COLUMN_NAME, fetch = FetchType.LAZY, cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    private Set<User> users = new HashSet<>();

    public Role() {
    }

    public Role(Long id) {
        this.id = id;
    }

    public Role(Long id, String name) {
        this.id = id;
        this.name = name;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Set<User> getUsers() {
        return users;
    }

    public void setUsers(Set<User> users) {
        this.users = users;
    }

//    public void addUser(User user) {
//        users.add(user);
//    }

    @Override
    public String getAuthority() { return getName(); }

//    @Override
//    public boolean equals(Object o) {
//        if (this == o) return true;
//        if (o == null || getClass() != o.getClass()) return false;
//        Role role = (Role) o;
//        return Objects.equals(id, role.id) &&
//                Objects.equals(name, role.name) &&
//                Objects.equals(users, role.users);
//    }
//
//    @Override
//    public int hashCode() {
//        return Objects.hash(id, name, users);
//    }

}
