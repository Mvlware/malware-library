package com.malware.library.model;

import java.lang.annotation.Target;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import javax.persistence.*;
import javax.validation.Constraint;
import javax.validation.Payload;
import javax.validation.ReportAsSingleViolation;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.time.LocalDate;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static java.lang.annotation.ElementType.*;

@Entity(name = User.ENTITY_NAME)
@Table(name = User.TABLE_NAME)
public class User implements UserDetails {
    public static final String ENTITY_NAME = "User";
    public static final String TABLE_NAME = "user";
    public static final String USERNAME_COLUMN_NAME = "username";
    public static final String PASSWORD_COLUMN_NAME = "password";
    public static final String NAME_COLUMN_NAME = "name";
    public static final String LASTNAME_COLUMN_NAME = "last_name";
    public static final String PATRONNAME_COLUMN_NAME = "patron_name";
    public static final String DATEOFBIRTH_COLUMN_NAME = "date_of_birth";
    public static final String DATEOFREGISTRATION_COLUMN_NAME = "date_of_registration";
    public static final String JOINTABLE_NAME = "user_has_role";
    public static final String USERID_JOINCOLUMN_NAME = "user_id";
    public static final String ROLEID_JOINCOLUMN_NAME = "role_id";
    public static final String ROLES_COLUMN_NAME = "roles";
    public static final String CUSTOMER_COLUMN_NAME = "customer";
    public static final String MANAGER_COLUMN_NAME = "manager";

    @Column(nullable = false, insertable = true, updatable = true)
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @Column(name = USERNAME_COLUMN_NAME, unique = true, nullable = false, insertable = true, updatable = true, length = 10485760)
    @Pattern(regexp = "^[АA-яz][аa-яz]*(\\s(([аa-яz]{1,3})|(([аa-яz]+\\')?[АA-яz][аa-яz]*)))*$", message = "Username is not valid, please use pattern: [АA-ЯZаa-яz] and length >= 5")
    @Size(min = 5, max = 10485760, message = "No less 5 characters")
    @NotNull
    private String username;

    @Column(name = PASSWORD_COLUMN_NAME, nullable = false, insertable = true, updatable = true, length = 10485760)
    @StrongPassword
    private String password;

    @Column(name = NAME_COLUMN_NAME, nullable = false, insertable = true, updatable = true, length = 20)
    @Pattern(regexp = "^[АA-яz][аa-яz]*(\\s(([аa-яz]{1,3})|(([аa-яz]+\\')?[АA-яz][аa-яz]*)))*$", message = "Name is not valid, please use pattern: [АA-ЯZаa-яz] and length <= 20")
    @Size(min = 1, max = 20)
    @NotNull
    private String name;

    @Column(name = LASTNAME_COLUMN_NAME, nullable = false, insertable = true, updatable = true, length = 30)
    @Pattern(regexp = "^[АA-яz][аa-яz]*(\\s(([аa-яz]{1,3})|(([аa-яz]+\\')?[АA-яz][аa-яz]*)))*$", message = "Lastname is not valid, please use pattern: [АA-ЯZаa-яz] and length <= 30")
    @Size(min = 1, max = 30)
    @NotNull
    private String lastName;

    @Column(name = PATRONNAME_COLUMN_NAME, nullable = false, insertable = true, updatable = true, length = 30)
    @Pattern(regexp = "^[АA-яz][аa-яz]*(\\s(([аa-яz]{1,3})|(([аa-яz]+\\')?[АA-яz][аa-яz]*)))*$", message = "Patronymic is not valid, please use pattern: [АA-ЯZаa-яz] and length <= 30")
    @Size(min = 1, max = 30)
    @NotNull
    private String patronName;

    @Column(name = DATEOFBIRTH_COLUMN_NAME, nullable = true, insertable = true, updatable = true)
    @DateTimeFormat(pattern = "dd.MM.yyyy")
    @JsonFormat(pattern = "dd.MM.yyyy", timezone="GMT+8")
    private LocalDate dateOfBirth;

    @Column(name = DATEOFREGISTRATION_COLUMN_NAME, nullable = false, insertable = true, updatable = true)
    @DateTimeFormat(pattern = "dd.MM.yyyy")
    @JsonFormat(pattern = "dd.MM.yyyy", timezone="GMT+8")
    private LocalDate dateOfRegistration;

    @ManyToMany(cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    @JoinTable(name = JOINTABLE_NAME, joinColumns = @JoinColumn(name = USERID_JOINCOLUMN_NAME), inverseJoinColumns = @JoinColumn(name = ROLEID_JOINCOLUMN_NAME))
//    @Enumerated(EnumType.STRING)
    private Set<Role> roles = new HashSet<>();

    @JsonIgnore
    @OneToMany (mappedBy = User.CUSTOMER_COLUMN_NAME, fetch = FetchType.LAZY, cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    private List<Order> customers;

    @JsonIgnore
    @OneToMany (mappedBy = User.MANAGER_COLUMN_NAME, fetch = FetchType.LAZY, cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    private List<Order> managers;

    public User() {
    }

    public Long getId() { return id; }

    public void setId(Long id) { this.id = id; }

    @Override
    public String getUsername() { return username; }

    public void setUsername(String username) { this.username = username; }

    @Override
    public String getPassword() { return password; }

    public void setPassword(String password) { this.password = password; }

    @Override
    public boolean isAccountNonExpired() { return true; }

    @Override
    public boolean isAccountNonLocked() { return true; }

    @Override
    public boolean isCredentialsNonExpired() { return true; }

    @Override
    public boolean isEnabled() { return true; }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() { return getRoles(); }

    public List<Order> getCustomers() { return customers; }

    public void setCustomers(List<Order> customers) {
        if (customers != null) {
            customers.forEach(a-> {
                a.setCustomer(this);
            });
        }
        this.customers = customers;
    }

    public List<Order> getManagers() { return managers; }

    public void setManagers(List<Order> managers) {
        if (managers != null) {
            managers.forEach(a-> {
                a.setManager(this);
            });
        }
        this.managers = managers;
    }

    public void addRole (Role role) {
        roles.add(role);
        role.getUsers().add(this);
    }

    public void removeRole(Role role) {
        roles.remove(role);
        role.getUsers().remove(this);
    }

    public String getName() { return name; }

    public void setName(String name) { this.name = name; }

    public String getLastName() { return lastName; }

    public void setLastName(String lastName) { this.lastName = lastName; }

    public String getPatronName() { return patronName; }

    public void setPatronName(String patronName) { this.patronName = patronName; }

    public LocalDate getDateOfBirth() { return dateOfBirth; }

    public void setDateOfBirth(LocalDate dateOfBirth) { this.dateOfBirth = dateOfBirth; }

    public LocalDate getDateOfRegistration() { return dateOfRegistration; }

    public void setDateOfRegistration(LocalDate dateOfRegistration) { this.dateOfRegistration = dateOfRegistration; }

    public Set<Role> getRoles() { return roles; }

    public void setRoles(Set<Role> roles) { this.roles = roles; }

    @NotNull
    @Size(min = 6, max = 10485760, message = "No less 6 characters")
    @Pattern.List({
            @Pattern(regexp = "(?=.*[0-9]).+", message = "Password must contain one digit."),
            @Pattern(regexp = "(?=.*[a-z]).+", message = "Password must contain one lowercase character."),
            @Pattern(regexp = "(?=.*[A-Z]).+", message = "Password must contain one uppercase character."),
            @Pattern(regexp = "(?=.*[!@#$%^&*+=?-_()/\"\\.,<>~`;:]).+", message ="Password must contain one special character."),
            @Pattern(regexp = "(?=\\S+$).+", message = "Password must contain no whitespace.")
    })
    @Constraint(validatedBy = {}) // constraints composition
    @Target({CONSTRUCTOR,METHOD,FIELD,ANNOTATION_TYPE,PARAMETER})
    @Retention(RetentionPolicy.RUNTIME)
    @ReportAsSingleViolation
    public @interface StrongPassword {
        String message() default "Password doesn't match bean validation constraints.";
        Class<?>[] groups() default {};
        Class<? extends Payload>[] payload() default {};
    }

//    @Override
//    public boolean equals(Object o) {
//        if (this == o) return true;
//        if (o == null || getClass() != o.getClass()) return false;
//        User user = (User) o;
//        return id.equals(user.id) &&
//                Objects.equals(username, user.username) &&
//                password.equals(user.password) &&
//                Objects.equals(name, user.name) &&
//                Objects.equals(lastName, user.lastName) &&
//                Objects.equals(patronName, user.patronName) &&
//                Objects.equals(dateOfBirth, user.dateOfBirth) &&
//                Objects.equals(dateOfRegistration, user.dateOfRegistration) &&
//                roles.equals(user.roles);
//    }
//
//    @Override
//    public int hashCode() {
//        return Objects.hash(id, username, password, name, lastName, patronName, dateOfBirth, dateOfRegistration, roles);
//    }
}
