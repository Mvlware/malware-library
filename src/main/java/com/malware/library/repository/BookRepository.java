package com.malware.library.repository;

import com.malware.library.model.Author;
import com.malware.library.model.Book;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface BookRepository extends JpaRepository <Book, Long> {

    @Override
    void delete(Book book);

    @Override
    List<Book> findAll();

    @Override
    Book save(Book book);

    List<Book> findBookByPublisherId (Long id);

    List<Book> findBookByCategoryId (Long id);

    List<Book> findBookByYearOfPublishing(Integer yearOfPublishing);

    @Query("Select b from Book b join b.authors a WHERE a.id=:author_id")
    List<Book> findBookByAuthor(@Param(Book.AUTHORID_JOINCOLUMN_NAME) Long authorId);

    @Query("Select b from Book b join b.authors a WHERE b.name LIKE :name% and a.id=:author_id")
    List<Book> findBookByAuthorAndName(@Param(Book.AUTHORID_JOINCOLUMN_NAME) Long authorId,
                                       @Param(Book.NAME_COLUMN_NAME) String name);

    @Query("select b from Book b WHERE b.name LIKE :name% order by b.name")
    List<Book> findBookByName(@Param(Book.NAME_COLUMN_NAME) String name);

    @Query("select b from Book b WHERE b.yearOfPublishing = :year_of_publishing and b.id = :id and b.name LIKE :name% order by b.name")
    List<Book> findBookByYearPublisherName (@Param(Book.YEAROFPUBLISHING_COLUMN_NAME) Integer yearOfPublishing,
                                            @Param(Book.ID_COLUMN_NAME) Long id,
                                            @Param(Book.NAME_COLUMN_NAME) String name);

//    List<Book> findBookByName(String name);
//    Book findBookByISBN(String ISBN);
//    List<Book> findBookByYear_of_publishing(String year_of_publishing); //never used
//    List<Book> findBookByNumber_of_copies(String number_of_copies); //never used
//    List<Book> findBookByAnnotation(String annotation); //never used
//
//    //Query используется для JPQL синтаксиса при сложных запросах
//    //@Query("select b from Book b order by name") //name - fixed error
//    List<Book> findAllBooksOrderByName();

}
