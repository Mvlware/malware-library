package com.malware.library.services;

import com.malware.library.model.Author;
import com.malware.library.model.Order;
import com.malware.library.model.OrderBook;
import com.malware.library.repository.BookRepository;
import com.malware.library.repository.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Service
public class OrderServiceImpl implements OrderService {

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private BookRepository bookRepository;

//    public static Integer sumPrice = null;

    public Order priceCount(Order order) {
        int daysBetween = 0;
        int sumPrice = 0;
        Set<OrderBook> books = new HashSet<>(order.getOrderBooks());
        for (OrderBook book : books) {
//            orderRepository.findBookById(bookRepository.findById(book.getBook().getId())).orElseThrow(() -> new BookInOrderNotFoundException("Order", book.getBook().getId()));
            if (order.getDateOrderOpen().compareTo(book.getDateBookReturnPlanned()) < 0) {
                daysBetween = Math.toIntExact(ChronoUnit.DAYS.between(order.getDateOrderOpen(), book.getDateBookReturnPlanned()));
                sumPrice=+daysBetween*book.getBook().getPricePerDay();
            }
        }
        order.setPrice(sumPrice);
        return orderRepository.save(order);
    }

//    @Override
//    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
//        User user = userRepository.findByUsername(username);
//        if (user == null) {
//            throw new UsernameNotFoundException("User not found");
//        }
//        return user;
//    }
//
//    public User findUserById(Long userId) {
//        Optional<User> userFromDb = userRepository.findById(userId);
//        return userFromDb.orElse(new User());
//    }
//
//    public List<User> allUsers() {
//        return userRepository.findAll();
//    }
//
//    public boolean saveUser(User user) {
//        User userFromDB = userRepository.findByUsername(user.getUsername());
//
//        if (userFromDB != null) {
//            return false;
//        }
//
//        user.setRoles(Collections.singleton(new Role(1L, "ROLE_USER")));
//        user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));
//        userRepository.save(user);
//        return true;
//    }
//
//    public boolean deleteUser(Long userId) {
//        if (userRepository.findById(userId).isPresent()) {
//            userRepository.deleteById(userId);
//            return true;
//        }
//        return false;
//    }
//
//    public List<User> usergtList(Long idMin) {
//        return em.createQuery("SELECT u FROM User u WHERE u.id > :paramId", User.class)
//                .setParameter("paramId", idMin).getResultList();
//    }
//}
}
